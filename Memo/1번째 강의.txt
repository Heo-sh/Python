2022-06-09
[프로그램]
컴퓨터가 실행할 수 있는 명령들을 모음

사람 : 명령 -> <-실행 : 컴퓨터

[프로그래밍]
명령들을 작성하여 프로그램을 만드는 작업

[프로그래밍 언어]
C,C++,C#(게임관련),JAVA(웹관련),PYTHON(빅데이터, 인공지능 관련)

Python이 사용하는 문법
명령
키워드

[컴파일 vs 인터프리터]
사람의 명령을 컴퓨터의 언어로 변환시켜주는 것
컴파일 방식 : 통짜 번역

인터프리터방식 : 한줄씩 번역

사람 : 프로그래밍언어 -> 컴퓨터 : 기계어

기계어 : 0과 1의 이진수로 이루어진 언어
0 : 전류가 통하지 않는 상태 off
1 : 전류가 통하는 상태 on

인터프리터 방식 : 대화형 언어 
명령 -> 실행
명령 -> 실행

실행시간 : 컴파일 방식이 인터프리터 방식보다 빠르다.
컴파일은 한번에 실행이나, 인터프리터는 한줄 씩 실행되기 때문이다.

Python이 활용되고 있는 분야
ex)인스타그램, 넷플릭스 알고리즘(영화 추천), 빅데이터(시각화와 인공지능 분야)

라이브러리 : 자주 쓰는 명령들의 모임, 코드들의 모임

프로그래밍의 존재 이유 : 막대한 계산의 간소화, 효율적인 업무처리

파이썬의 특징 (번외)
정형데이터 - 엑셀에서 관리가 가능한 데이터 ex) 주소, 상대방의 기호
비정형데이터 - 음성, 이미지 구체적으로 정의가 x

**IDE (Intergrated Development Environment)
통합개발환경 이란,
소스코드 작성 및 오류 수정, 컴파일, 실행 혹은 배포 등
프로그램을 개발하기 위해 필요한 모든 작업을
하나의 프로그램 안에서 처리할 수 있는 환경을 제공하는 소프트웨어

Python 프로그램을 만들기 위해서 사용할 수 있는 IDE 종류
VisualStudioCODE, IDLE, PYCHAM, JUPYTER NOTEBOOK

**IDLE 시작후 Shell에서  Ctrl + N -> 스크립트 생성
스크립트에서 코드 작성 후 F5를 누르면 실행이 되며
Shell에서 결과가 나온다.
실행하기 전에 저장(Ctrl + S)하는 습관을 들이는 것이 좋다.

***주석 (#, """ """, ''' ''')***
1. 인터프리터가 번역하지 않는 메모
2. 코드에 설명을 달아놓는 개념이다.
3. 주석을 달아놓는 습관이 있으면 좋다.

한줄 주석 : #설명을 달고싶은 문장
-간단하게 코드에 대한 설명을 할 때 한줄 단위로 작성을 한다.

여러줄의 주석 : """주석의 내용""" or  '''주석내용'''
- 여러줄의 단위로 코드에 대해 설명할 때 사용
ex)
'''
파일명 : 
개요 :
작성자 :
최조작성일
'''

***변수***
'변수' 를 선언한다.
일종의 상자로 예시
ex) '변수명 = 데이터;'
다른언어의 경우
일일히 성수형 자료형 등으로 분류 입력해야한다.
자료형 변수명 = 넣고 싶은 데이터;
자료형은 상자의 형태
변수명은 상자에 붙이는 이름표    ===>>> 구분하기 위함이다.

ps) 변수 표기법
  - lowercamelCase - 마지막 단어의 앞 알파벳을 대문자로
  - UpperCamelCase - 각 단어의 앞 알파벳을 대문자로
  - 스네이크 표기법 - 언더바 활용

***자료형*** 
1.정수형 (int) 
  - 소수점이 없는 정수만 담을 수 있다 ex) int(number) = 1 or 2 or 3 , number = 100;
2.실수형 (float) 
  - 실수만 담을 수 있다. (3.14... 등등) ex) pi = 3.14;
3.문자열 (str) 
  - 문장을 담을 수 있다. ex) str = 'Hello World'
  - 텍스트 데이터
  - 반드시 큰따옴표나, 작은따옴표 안에 들어가야한다.

ps)Python의 경우
  - 변수 안의 성질을 판별하여 스스로 정수형인지 실수형인지 문자열인지 분류를 한다.  
     자료형을 생략해도 알아서 인실을 해준다.

ex) name = 'Alice' 이 때, name이 변수이다.
none은 아무것도 저장하지 않는다는 것이다.
ps) 같은 코드 내에서 변수는 중복되지 않아야한다.

변수명 선언 규칙
1. 영어, 한글, 숫자, 밑줄(_)로 구성된다. ps)숫자는 맨 앞는 사용불가
2. 특수문자는 사용할 수 없다.
3. 대문자와 소문자를 구분한다.
4. 변수명의 첫 글자는 숫자를 사용할 수 없다.
5. 키워드(while, list, dict, if, for, and 등)는 사용할 수 없다.

ps) 코드를 짤 때 python이 구분을 해준다지만, 본인 스스로가 정수형인지 실수형인지 문자열인지 등을 구분할 줄 알아야한다.

*int(정수)

int(1.9) >>> 0.9를 버리고 1로 변환이 된다.
int(True) >>> True는 1로 변환이 된다.
int(False) >>> False는 0으로 변환이 된다.


***출력함수***
함수 : 어떠한 기능이 있는 것
출력함수 : '출력' 하는 기능이 있는 것 - >>> 모니터에 출력을 하라

ps) 사람 : input - > <- output : 컴퓨터
input : 입력
output : 출력

입력장치      ---->>>    출력장치
- 키보드                      - 모니터
- 마우스                      - 스피커
- 스캐너                      - 프린터
- 마이크                      
- 캠

***print(출력을 하라는 명령어)***
-print(출력할 값)
-ex) print(100, 200, 300) 처럼 출력값 안에 많은 값을 넣을 수 있다.
   - print는 출력을 해주는 명령어 (100, 200, 300)은 출력값
 ex)print('hello') - 문자열
    print(2022) - 정수형
    print(3.14) - 실수형
-ps) 중복되는 코드를 많이 실행시키는 법 - 코드의 잘못 된 부분을 쉽게 고칠 수 가 있게 된다. 변수를 지정하게 된다면.
      a = 1 -> 정수형 변수
     print(a);
     print(a);
-ps) 문자열과 정수열을 같이 입력하고 싶은 경우 사이에 쉼표를 넣어준다.
***sep***
-ex)print(100,200,300)의 경우 출력값 안의 따옴표가 출력이 되지 않으나, 
     print(100,200,300,sep=',')의 경우에는 또옴표가 출력이 될 수 있게 해준다.

***이스케이프 문자***
\' 홑따옴표 출력
\" 쌍따옴표 출력
\t (tab)
\n 줄바꿈

***형식지정자***
-출력 시 형식을 지정하는 형식을 갖춘 문자열
-ex) print('형식지정' %출력값) = print('%d' %데이터);
- 형식지정이란? = 규칙을 만드는 것
1. %d : 정수로 지정
ex)print('%d' %출력값) '출력값' 안에는 '정수'만 입력가능하다.

2. %f : 실수로 지정
ex)print('%f' %실수값)
ps)print('%.1f') 경우 소수점 하나 값만 나온다.
              2   경우 소수점 두개 값이 나온다.
3. %c : 문자형으로 지정
ex)print('%c' %글자 1개) - 단어만 입력가능

4. %s : 문자열로 지정
ex)print('%s' %'문장') - 문장으로 입력가능
ps)print('%s'%실수 및 정수)여도 출력은 가능하나 컴퓨터에서는 문자로 인식을 한다.



























































































