2022-06-17

***while문의 중첩***
-while문의 내부에 또 다른 while문이 나타나는 것을 while문의 중첩이라고 한다.
-반복해서 처리해야하는 대상이 2개 이상이면, while문의 중첩이 필요하다.

ex) 총 5일동안 하루에 3시간씩 수업을 한다.
출력결과 : 1일차 1교시입니다.
             1일차 2교시입니다.
             1일차 3교시입니다.
             2일차 1교시입니다.
                       .
                       .
                       .
             5일차 3교시입니다.

-------------------------------------------------------------------------------------------------

***컬렉션***
'모음'이라는 뜻으로 파이썬에서는 여러 값을 묶어서 관리하는 자료형

1. 리스트(list) - [1,2,3]
   -추가, 수정, 삭제가 언제나 가능
2. 튜플(tuple) - (1,2,3)
   -생성되고 나면 변경 불가능
3. 세트(set) - {1,2,3}
   -중복된 값의 저장 불가능
4. 딕셔너리(dict) - {'age':25}
   -key(키)와 value(값)로 관리를 합니다.

------------------------------------------------------------------------------------------

***리스트(list)***
+여러 값을 저장할 때 가장 많이 사용하는 자료형
+저장하고자 하는 값들의 자료형(int, float, str)들이 서로 다르더라도 하나의 리스트에 저장할 수 있다.

li = [100, 3.14, 'hello']
li = list() -> 반복가능객체값

1. 리스트의 인덱싱(indexing)
+리스트는 저장된 요소들마다 고유 번호인 인덱스(index)를 부여하여 순서대로 관리할 수 있다.
ex) li = [100, 3.14, 'hello']
    index 0     1      2    
    print(li[0]) - > 100출력 

2. 리스트의 슬라이싱(slicing)
+리스트의 일부요소만 이용하고자 하는 경우 슬라이싱을 활용할 수 있다.
print(li[0:3]) 시작인덱스 이상 종료인덱스 미만을 추출 출력

3. 리스트의 요수 추가와 삭제
+리스트에 새로운 요소를 추가할 때는 append()와 insert() 함수(메소드)를 사용한다.
+기존 요소를 삭제할 때는 pop() 함수(메소드)를 사용한다.
ex) pop활용
list.pop() <- 마지막 요소를 제거합니다.
list.pop(index) <- 해당하는 index번호의 값을 제거

ps) pop과 같은 삭제기능을 가진 함수
  - remove
    = .remove('삭제할 항목')
  - del
    = del 리스트명[삭제할 항목 인덱스]
  - clear
    = .clear() <--- 모든 항목 삭제

----------------------------------------------------------------------------------

***튜플(tuple)***
+저장된 값을 변경할 수 없는 리스트
+프로그램이 실행되는 동안 값이 변경되면 안되는 경우에 사용
+튜플은 리스트에 비해 적은 메모리를 필요로 하고, 속도가 빠른 것이 장점
ex) t = (값1,값2,....)  
    t = tuple()  
    t = (값1,) - 값을 1개만 보관하는 경우 값과 콤마를 반드시 함께 작성해야한다.
              그렇지 않을 경우 튜플이 아닌 그냥 값으로 인식된다.

---------------------------------------------------------------------------------

***셋(set)***
+수학의 집합 개념을 구현한 자료형입니다.
+저장된 값들은 순서가 없기 때문에 인덱싱, 슬라이싱이 불가능
+대신 값의 중복저장이 불가능 하다는 특징을 활용해 중복제거용으로 사용
ex) set = {1,2,3}
       s = set()

-------------------------------------------------------------------------------------

***딕셔너리(dict)***
+사전처럼 단어와 단어의 의미로 구성이 되어있다.
+키(key)와 값(value)으로 이루어져 있다.
  ex) dict = {key1 : value1, key2 : value2,...}
+딕셔너리는 인덱스가 존재하지 않는 대신 키를 인덱스처럼 활용한다.
+추가하는 방법
  ex) dict['c'] = 'carrot'
+삭제하는 법
  ex) 딕셔너리명.pop(key)

----------------------------------------------------------------------------------------

***for문***
+원하는 횟수만큼 명령을 반복하는 문법
+구조(for문과 문자열)
  for 변수 in 반복가능객체:
               반복실행할 명령
+반복가능객체와 for문을 사용하면 몇 번 반복할 것인지, 어떤 범위의 값을 사용할 것인지를 쉽게 파악 가능
ps) for문과 while문의 차이점 - while문은 무한반복가능
1. for문과 리스트
+구조(리스트 순회)
for 요소 is [리스트]:
          반복실행할 명령

+구조(리스트 내포)
리스트 = [표현식 for 변수 in 반복가능객체 ]

2. for문과 range()함수
+range()함수는 정수 범위를 만들어낼 때 유용한 함수
+for문과 range()함수를 함께 사용하면 개발자가 원하는 범위의 값을 쉽게 생성 가능
+구조
range(초기값, 종료값, 증감값)
+특징  
  - 초기값부터 종료값 이전까지 숫자 (n)들의 컬렉션을 만든다. (초기값 <= n < 종료값)
  - 초기값을 생략하면 0부터 시작
  - 종료값은 생략 불가
  - 증감값을 생략하면 자동으로 1씩 증가




























