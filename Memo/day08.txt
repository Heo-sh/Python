day08

[디폴트 파라미터]
입력 파라미터를 따로 주지 않는 경우에도 함수를 호출할 수 있게 합니다.

일반적으로 어떤 한개의 파라미터가 값을 가지게 되면 다른 파라미터가 디폴트 파라미터로 사용하곤 합니다.

----------------------------------------------------
[메서드]
메서드는 특정 객체가 가지고 있는 함수를 의미합니다. 특정 자료형에 포함되어 있는 함수라고 볼수 있습니다.
함수와 메서드는 같은 개념이지만 차이가 있다면
함수는 독립적으로 호출할수 있지만

메서드는 특정 객체를 통해서만 호출할 수 있습니다.
-----------------------------------------------------
[String]
1. 인덱싱,슬라이싱이 가능하다
2. 값을 수정할 수 있다.

문자열 슬라이싱
물리적으로 이어붙어져 있는 자료구조는
인덱스를 갖고 있습니다.
- 인덱스 번호를 통해서 검색,(삽입,삭제,수정)
을 할 수 있습니다.
- 인덱스 번호는 0번부터 시작하고 그 자료의 길이 -1까지의 범위를 가집니다.

파이썬에서의 문자열은 인덱스를 통해서 문자를 검색할 수 있습니다.
문자열 안의 글자 혹은 글자들에 접근하기 위해서 []기호를 사용합니다.

인덱스 사용시 주의사항
- 범위를 벗어나는 경우 오류가 발생합니다.
- 음수를 입력할 경우 뒤에서 부터 차례로 검색합니다.
- 두 개 이상의 글자들에게 접근하기 위해서 : 을 사용해 범위를 설정합니다.

인덱싱&슬라이싱 예제
str = 'Hello World'
str[0] # str의 0번째 글자
str[-1] # str의 마지막 글자
str[start:end] # str의 start부터 end-1번째에 해당하는 글자까지 포함하는 새로운 문자열
-> 슬라이싱
str[start:] #str의 start에 해당하는 글자를 시작으로 끝 글자까지들의 글자들을 포함하는 새로운 문자열== str[start:-1]

str[:end] #첫글자부터 end-1에 해당하는 글자를 끝으로 하는 새로운 문자열 ==str[0:end]

str[start:end:step] # start부터 end-1글자까지 step 간격만큼 인덱스에 해당하는 새로운 문자열
----------------------------------------------------
[문자열의 값 수정]
문자열은 한번 값을 대입하고 나면 수정이 불가능 합니다.

따라서 값을 수정하고자 한다면 반드시 새로운 문자열을 만들어서 기존 문자열의 일부 값을 취하는 동작을 하게끔 코드를 작성해야 합니다.
-----------------------------------------------------
['와"의 사용]
문장 안에 '를 사용하거나 "를 사용해야 하는 경우가 존재합니다. 해당 경우에는 다음과 같이 사용합니다.
- '를 사용해야 하는 경우에는 "문장" 묶어서 문자열 표현하기

-"를 사용해야 하는 경우에는 '문장'묶어서 문자열 표현하기

혹은 Escape Sequence를 활용해서 '나 "를 사용할 수 있습니다.

str='gildong\'s house'

첫번째 용도 : 특수 기호를 나타낼 때 사용합니다.

두번째 용도 : 특수한 기능을 사용할 때 활용합니다.

print(1,2,3,4,5, sep='\n')
print(1,2,3,4,5, sep='\t')
-----------------------------------------------------
[문자열 메서드]
-count() : 문자열 내부에 포함된 특정 문자열의 개수를 반환하는 메서드
-find() : 괄호 안에 있는 문자열을 찾아서 해당 인덱스를 반환
-upper() : 모든 문자를 대문자로 치환
-lower() : 모든 문자를 소문자로 치환
-capitalize() : 첫글자는 대문자로 나머지는 소문자로 치환
-split() : 하나의 문자열을 여러 개의 문자열로 분리해서 저장한 리스트를 반환하는 메서드
-replace() : 문자열의 일부 문자열을 다른 문자열로 바꾼 결과를 반환합니다.

----------------------------------------------------------
[리스트 메서드]
-len(list) : 리스트의 길이를 반환합니다.
-index(value) : 리스트의 한 요소를 적으면 index번호를 반환합니다.
-append(value) : 리스트 맨 뒤에 value를 추가합니다.
-extend(list) : 리스트 맨뒤에 새로운 리스트를 추가
-insert(index, value) : 해당하는 index번호에 value값을 새로 넣어줍니다.
-pop(n) :  n번째 요소를 삭제합니다.
-remove(value) : 리스트 내에서 주어진 value와 동일한 value를 모두 제거합니다.
-clear() : 리스에 저장된 모든 요소들을 제거하는 메서드 입니다.
-count(value) : 리스트안에 value와 동일한 value의 개수를 카운트 해줍니다.
-del(list[index]) : 리스트의 데이터를 삭제합니다.
-sort() : 데이터의 원소를 오름차순으로 정렬합니다.

























































































