day09
[이중리스트]
list의 원소 타입은 어떠한 자료형도 가능합니다.
list가 list의 원소가 될 수 있습니다.
이러한 list를 이중,삼중...n중 리스트라고 표현합니다.

이중리스트는 2차원 문제를 해결할 때 주로 사용합니다.
이중 리스트는 두 개의 인덱싱을 활용해 하나의 개별 원소에 접근 합니다.

ex)
   - 리스트명 [][]: 개별 원소에 접근
   - 리스트명 [] : 1차원 리스트에 접근
--------------------------------------------------------------
[튜플]
순서가 있다, 중복을 허용한다.

<튜플의 기본 구조>
animals= ('dog','cat','bird','fish','tiger')

튜플은 ()가 없어도 튜플이고 튜플의 본질은 , 에 있습니다.

원소가 하나인 튜플을 만드려면 원소 뒤에 ,를 붙히면 됩니다.

animal2 = 'dog',

#인덱싱
print(animals[0])

#슬라이싱
print(animals[1:3], type(animals[1:3]))

튜플연산
 - + : tuple 사이에 + 연산을 하면 두 개의 tuple을 합한 tuple이 나옵니다.

- * : tuple * 정수를 연산하여 해당 tuple이 정수배 만큼 추가된 tuple이 나옵니다.

- in : tuple에 데이터가 존재하는지 bool타입으로 반환
--------------------------------------------------------------
[set]
중복을 허용하지 않는다.
순서가 없다.

*순서가 없기 때문에 인덱싱이 불가능하다.

set의 기본 구조
animals = {'dog','cat','bird',cat','dog'}

print(animals) #중복을 허용하지 않는다. #순서가 없다.

set의 내장함수
- add(value) : set에 value 추가 -> 중복되는 경우 추가 x
- remove(value) : set에서 value 삭제
- s1.intersection(s2) 혹은 s1&s2 : set 간의 교집합
- s1.union(s2) 혹은 s1|s2 : set간의 합집합
- s1.difference(s2) 혹은 s1 - s2 : s1과 s2의 차집합

#add
animals.add('wahle')
print(animals)
animals.add('wahle')
print(animals)

#remove
animals.remove('wahle')
print(animals)
#animals.remove('wahle') keyError


#intersection
s1 = set([1,2,3,4])
s2 = set([3,4,5,6])
print(s1, s2)

print(s1.intersection(s2))
print(s1&s2)

#union
print(s1.union(s2))
print(s1|s2)

#difference
print(s2.difference(s1))
print(s2 - s1)

set의 활용용도
1. 중복된 값을 제거하기 위해 사용합니다.
2. 해쉬값을 사용해 더 빠른 탐색을 위해 사용합니다.

--------------------------------------------------------------
[dict(딕셔너리)]
- dictionary는 key-value 쌍으로 저장되는 데이터 집합
- dictionary는 순서가 없기 때문에 인덱싱이 불가능 하지만 key를 이요한 검색이 가능합니다.

dict의 기본구조
-dictionary는 {}를 통해 데이터를 표현합니다.

dict의 데이터 수정/추가/삭제
1. 데이터의 수정은 [key]값을 적어주고 =을 통해 수정할 값을 넣어줍니다.

2. 데이터의 추가는 만들 key값을 적어주고, = 을 통해 값을 추가합니다.

3. 데이터의 삭제는 del함수를 사용합니다.

dictionary의 내장함수
- keys() : 딕셔너리의 모든 key값을 반환
- values() : 딕셔너리의 모든 value값을 반환
- items() : 딕셔너리의 모든 key와 value쌍을 반환합니다.

student = {'name':'홍길동','e-mail':'hong@gmail.com','tel':'010-1111-1111'}

print(student)

#데이터의 수정 -> 존재하는 키값
student['name'] = '이현준'
print(student)

#데이터의 추가 -> 존재하지 않는 키값
student['address'] = '서울시'
print(student)

#데이터의 삭제
del(student['e-mail'])
print(student)


#keys() : 모든 키값들 만 출력
print(student.keys())

#values()
print(student.values())

#items()
print(student.items())

# in : key의 존재 여부를 확인할  때 사용합니다.
print(student)
print('name' in student)
print('홍길동' in student)
--------------------------------------------------------------
[lambda함수]
이름이 없는 함수

람다표현식이란?
실행 시간중(Runtime)에 생성해서 사용할 수 있는
이름이 없는 함수 입니다. 일시적으로 사용할 때 lambda
표현식을 사용하기도 합니다.

간단한 기능을 일반적인 함수와 같이 정의해서 구현하려는 것이 아니라 필요한 곳에서 바로 사용하고 버릴수 있습니다. lambda표현식에 이름을 붙혀서 반복적으로 사용할 수도 있습니다.

lambda표현식 구조
lambda 파라미터(집합) : 파라미터에 대한 동작 

lambda표현식을 사용하는 이유
1. runtime중에 함수를 만들어서 사용 가능합니다.
-> 파이썬에서는 크게 신경x
2. lambda표현식에 익숙해지면 일반 함수를 만들어서 사용하는 것 보다 매우 간단하고, 편리하게 함수를 만들 수 있습니다.

#람다 표현식의 구조
lambda x : x+10

print((lambda x : x+10)(10))
print((lambda x : x+10)(1))

#위의 람다 함수와 같은 기능을 하는 함수를 만들기
def func1(x):
    return x+10

print(func1(10))

#lambda 표현식에 이름 붙혀서 재사용하기
tempFunc = lambda x : x+10
print(tempFunc(10))

#파라미터를 두 개 전달받는 경우
tempfunc2 = lambda x,y : x + y
print(tempfunc2(2,10))

#파라미터를 리스트로 전달받는 경우
temp_list = [1,2,3,4,5]
tempFunc3 = lambda lst : sum(lst)
print(tempFunc3(temp_list))
lambda표현식 사용시 주의 사항
1. 파라미터의 데이터 타입을 확인해야 합니다.
2. lambda표현식 내부에 변수를 만들어서 활용할 수 없습니다.

lambda표현식의 활용
- map(lambda표현식, 집합 데이터)
- sort(key=lambda 표현식)
     -sort함수에서 key는 정렬하는 기준 원소를 정렬합니다.
--------------------------------------------------------------
[method와 class]
class란 데이터 값과 함수가 상호의미적으로 연관되어 있는 묶음을 의미합니다.

함수의 유형
1. 내장함수 : python 언어에서 기본적으로 제공하는 함수
2. 모듈 내 함수 : 모듈에 포함되어 있어 모듈을 import 한 뒤 사용하는 함수
3. 사용자 정의 함수 : 프로그래머가 본인의 프로그램 안에서 직접 만들어서 사용하는 함수
4. lambda 표현식을 활용한 함수 : 이름이 없는 함수
5. 메서드(메소드) : 특정 타입에 포함되어, 그 타입에 맞게 사용할 수 있는 함수

class란?
일종에 타입 데이터와 메서드(Method)의 묶음 입니다.
class를 통해 만든 무언가를 객체 라고 표현합니다.

Method란?
class로 부터 만들어지는 객체들의 함수를 메서드 라고 합니다. -> 특정한 타입에 포함되는 함수

메서드의 활용
특정 타입의 객체.메서드명()


























































































































